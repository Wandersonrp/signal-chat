@using System.Security.Claims
@using Microsoft.AspNetCore.SignalR.Client
@using SignalChat.Api.Models.DTOs
@using System.Net

@inject NavigationManager NavigationManager

@implements IAsyncDisposable

<AuthorizeView>
    <ul>
        <li class="cursor-pointer py-2 pl-4">
            <div class="flex">
                <iconify-icon class="mr-2 mt-1 font-semibold text-white" icon="bxs:down-arrow" width="18" height="18"></iconify-icon>
                <h2 class="text-base text-white">Channels</h2>
            </div>
        </li>
    </ul>

    <ul>
        <li class="cursor-pointer py-2 pl-4 hover:bg-neutral-900/50">
            <div class="flex">
                <iconify-icon class="mr-2 mt-1 font-semibold text-white" icon="ic:round-plus" width="18" height="18"></iconify-icon>
                <h2 class="text-base text-white">Add Channel</h2>
            </div>
        </li>

        <li class="cursor-pointer py-2 pl-4 hover:bg-neutral-900/50">
            <div class="flex">
                <iconify-icon class="mr-2 mt-1 font-semibold text-white" icon="solar:hashtag-bold" width="16" height="16"></iconify-icon>
                <h2 class="text-base text-white">design-team</h2>
            </div>
        </li>

        <li class="cursor-pointer py-2 pl-4 hover:bg-neutral-900/50">
            <div class="flex">
                <iconify-icon class="mr-2 mt-1 font-semibold text-white" icon="solar:hashtag-bold" width="16" height="16"></iconify-icon>
                <h2 class="text-base text-white">blazor-engineering</h2>
            </div>
        </li>
    </ul>

    <ul>
        <li class="cursor-pointer py-2 pl-4">
            <div class="flex">
                <iconify-icon class="mr-2 mt-1 font-semibold text-white" icon="bxs:down-arrow" width="18" height="18"></iconify-icon>
                <h2 class="text-base text-white">Direct Messages</h2>
            </div>
        </li>
    </ul>

    <ul>        
        @foreach(var item in _previousChatUserList)
        {
            if(item.Email != context.User.Claims.Where(claim => claim.Type == ClaimTypes.Email).FirstOrDefault()?.Value)
            {
                <li class="cursor-pointer py-2 pl-4 hover:bg-neutral-900/50">
                    <div class="flex items-center">
                        <span class="w-[5px] h-[5px] mr-2 mt-0.5 rounded-full border bg-green-700 p-1"></span>
                        <h2 class="text-base text-white">@item.Name</h2>
                    </div>
                </li>
            }
        }
    </ul>
</AuthorizeView>

@code 
{
    private HubConnection? _hubConnection;
    private Dictionary<string, HashSet<string>> _userListing = [];
    private ICollection<UsersForListingDTO> _previousChatUserList = new List<UsersForListingDTO>();

    [Inject]
    public CookiesProvider? CookiesProvider { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var container = new CookieContainer();
        var cookie = new Cookie()
        {
            Name = "SignalChatCookie",
            Domain = "localhost",
            Value = CookiesProvider?.Cookie ?? string.Empty
        };

        container.Add(cookie);

        if(CookiesProvider.Cookie is null)
        {
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/chat"))
                .Build();
        }
        else
        {
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/chat"), option => option.Cookies = container)
                .Build();
        }

        _hubConnection.On<Dictionary<string, HashSet<string>>>("ReceiveInitializeUserList", (list) =>
        {
            foreach(var user in list)
            {
                var dataArray = user.Key.Split('-');
                var userEmail = dataArray[0];
                var userName = dataArray[1];

                this._previousChatUserList.Add(new UsersForListingDTO
                {
                    Email = userEmail,
                    Name = userName
                });
            }

            InvokeAsync(() => StateHasChanged());
        });

        _hubConnection.On<string>("UserDisconnected", email =>
        {
            var user = _previousChatUserList.Where(user => user.Email.Equals(email)).FirstOrDefault();

            _previousChatUserList.Remove(user);
            InvokeAsync(() => StateHasChanged());
        });

        await _hubConnection.StartAsync();
        await _hubConnection.InvokeAsync("InitializeUserList");        
    }

    public async ValueTask DisposeAsync()
    {
        if(_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}